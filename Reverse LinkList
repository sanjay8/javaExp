
public class RevLL {
	Node head;
	
	
	public static class Node {
		Node next;
		int data;
		
		Node (int d)
		{
			data = d;
			next = null ;
		}
		
	}
	
	RevLL ()
	{
		head = null;
	}
	
/* Recursion used to 
 * insert data elements
 */
	public void insert(int data)
	{
		head = insert (data, head);
	}
	
	public Node insert ( int data_item, Node node)
	{
		if ( node == null)
		{
			node = new Node ( data_item);
			//node.next = null;
		}
		else 
		{
			
			/* hahahahhahahah
			 * when the function is being called it will return something ( if it has a returning type )
			 * so you have to save the returning item into something ( :p if you need the item ) 
			 */
			
			
			node.next = insert ( data_item, node.next);
		}
		
		/* did return head
		 * hence program was not running since head is not in use in the function , but node is .
		 */
		return node;
	}
	
	
/* Recursively printing the llist
 * 
 */
	public void printList()
	{
		Node n = head;
		while ( n != null)
		{
			System.out.print(n.data + " ");
			n = n.next;
		}
	}
	
	public void reverseList ()
	{
		head = reverseList( head );
	}
	
	public Node reverseList ( Node node)
	{
		if ( node.next == null)
		{
			return node;
		}
		
		else{
			node.next = reverseList ( node.next);
			return node.next;
		}
		
	}
}
